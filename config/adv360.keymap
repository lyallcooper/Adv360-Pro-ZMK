/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

// Layers
#define BASE 0
#define HYPH 1
#define UNDS 2
#define KEYP 3
#define FUNC 4
#define MODS 5
#define SYMB 6

#define XXX &none
#define ___ &trans

#define COMBO(k1, k2, bind) combo_ ## k1 ## _ ## k2 { \
bindings = <&kp bind>; key-positions = <k1 k2>; timeout-ms = <30>; }

#define SLEEP LC(LG(Q))

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };

    mtt: mod_tap_preferred {
        compatible = "zmk,behavior-hold-tap";
        label = "MOD_TAP_PREFERRED";
        #binding-cells = <2>;
        tapping-term-ms = <170>;
        quick-tap-ms = <200>;
        retro-tap;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };

    1p: 1password_tap_dance {
        compatible = "zmk,behavior-tap-dance";
        label = "1P_TAP_DANCE";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp LG(LA(FSLH))>, <&kp LG(BSLH)>;
    };
  };

  combos {
    compatible = "zmk,combos";
    COMBO(16, 17, LC(TAB));
    COMBO(12, 13, SLEEP);
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
    &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4    &kp N5             &tog KEYP  &mo MODS   &kp N6     &kp N7     &kp N8     &kp N9    &kp N0  &kp MINUS
      &kp TAB      &kp Q     &kp W     &kp E      &kp R     &kp T              &tog HYPH     XXX      &kp Y      &kp U      &kp I      &kp O     &kp P   &kp BSLH
 &mt LCMD ESC      &kp A     &kp S     &kp D      &kp F     &kp G              &tog UNDS  &kp LCTRL   &kp LALT                        &kp LCTRL  &kp RCMD      XXX     &kp H   &kp J      &kp K    &kp L  &kp SEMI    &kp SQT
    &kp LSHFT      &kp Z     &kp X     &kp C      &kp V     &kp B              XXX     XXX   &kp HOME      XXX      XXX  &kp PG_UP     XXX      XXX     &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
        &mo FUNC   &kp GRAVE &kp CAPS  &kp LEFT  &kp RIGHT  &mt LSHFT BSPC      &mt LCMD DEL  &kp END  &kp PG_DN  &mt LCTRL ENTER  &mtt LALT SPACE   &kp DOWN    &kp UP   &kp LBKT  &kp RBKT   &1p
            >;
        };

        layer_hyphen {
            bindings = <
  ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___
  ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___
  ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___
  ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___
  ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ &kp MINUS ___ ___ ___ ___ ___
            >;
        };

        layer_underscore {
            bindings = <
  ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___
  ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___
  ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___
  ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___
  ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ &kp UNDERSCORE ___ ___ ___ ___ ___
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4    &kp N5             ___      &mo MODS   &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY   &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R     &kp T              XXX      XXX      &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS    &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F     &kp G              XXX  &kp LCTRL   &kp LALT                                 &kp LGUI        &kp RCTRL       XXX     &kp H  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V     &kp B              XXX      XXX   &kp HOME       XXX         XXX      &kp PG_UP            XXX       XXX     &kp N  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER  &kp RSHFT
   &mo FUNC     &kp GRAVE &kp CAPS  &kp LEFT  &kp RIGHT  &kp BSPC           &kp DEL    &kp END &kp PG_DN   &kp ENTER     &kp KP_N0         ___         ___  &kp KP_DOT  &kp RBKT      &mo FUNC
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog KEYP &mo MODS &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 ___  ___  ___  ___  ___  ___             XXX    XXX    ___  ___  ___   ___   ___   ___
 ___  ___  ___  ___  ___  ___             XXX    ___   ___                   ___   ___    XXX  ___  ___  ___  ___  ___  ___
 ___  ___  ___  ___  ___  ___             XXX    XXX    ___   XXX   XXX   ___    XXX    XXX  ___  ___  ___  ___  ___  ___
 ___  ___  ___  ___  ___  ___             ___   ___   ___  ___  ___   ___   ___   ___  ___  ___
            >;
        };

        layer_mod {
            bindings = <
  XXX  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                             XXX       ___  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   XXX
  XXX         XXX         XXX         XXX         XXX            XXX                       &bootloader  &bootloader         XXX         XXX            XXX         XXX         XXX                   XXX
  XXX         XXX         XXX         XXX         XXX            XXX            &rgb_ug RGB_MEFS_CMD 5   &bt BT_CLR         XXX                                   &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5   XXX   XXX   XXX   XXX   XXX   XXX
  XXX         XXX         XXX         XXX         XXX            XXX                             XXX        XXX         XXX         XXX            XXX         XXX         XXX                   XXX   XXX   XXX   XXX   XXX   XXX   XXX
  XXX         XXX         XXX    &bl BL_INC    &bl BL_DEC  &rgb_ug RGB_TOG                        &bl BL_TOG        XXX         XXX    &bl BL_TOG  &rgb_ug RGB_TOG    &bl BL_DEC    &bl BL_INC                   XXX   XXX   XXX
            >;
        };

        layer_symbol {
            bindings = <
  XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
  XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
  XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX &kp LEFT &kp DOWN &kp UP &kp RIGHT XXX XXX
  XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
  XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
            >;
        };

    };
};
